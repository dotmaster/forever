#!/usr/bin/env node

var path = require('path'),

    fs = require('fs'),
    sys  = require('sys');

var accepts = ['start', 'stop', 'stopall', 'list', 'cleanlogs'], action;
if (accepts.indexOf(process.argv[2]) !== -1) {
  action = process.argv.splice(2,1)[0];
}

var argv = require('optimist').argv;

require.paths.unshift(path.join(__dirname, '..', 'lib'));

var forever = require('../lib/forever.js');

var help = [
    "usage: forever [start | stop | stopall | list | cleanlogs] [options] SCRIPT [script options]",
    "",
    "options:",
    "  start          start SCRIPT as a daemon",
    "  stop           stop the daemon SCRIPT",
    "  stopall        stop all running forever scripts",
    "  list           list all running forever scripts",
    "  cleanlogs      [CAREFUL] Deletes all historical forever log files",
    "",
    "  -m MAX         Only run the specified script MAX times",
    "  -l  LOGFILE    Logs the forever output to LOGFILE",
    "  -o  OUTFILE    Logs stdout from child script to OUTFILE",
    "  -e  ERRFILE    Logs stderr from child script to ERRFILE",
    "  -p  PATH       Base path for all forever related filesÂ (pid files, etc.)",
    "  -s, --silent   Run the child script silencing stdout and stderr",
    "  -h, --help     You're staring at it",
    "",
    "[Long Running Process]",
    "  The forever process will continue to run outputting log messages to the console.",
    "  ex. forever -o out.log -e err.log my-script.js",
    "",
    "[Daemon]",
    "  The forever process will run as a daemon which will make the target process start",
    "  in the background. This is extremely useful for remote starting simple node.js scripts",
    "  without using nohup. It is recommended to run start with -o -l, & -e.",
    "  ex. forever start -l forever.log -o out.log -e err.log my-daemon.js",
    "      forever stop my-daemon.js",
    ""
].join('\n');

var mappings = {
  'm':      'max',
  'l':      'logFile',
  'p':      'path',
  's':      'silent',
  'silent': 'silent',
  'o':      'outFile',
  'e':      'errFile'
};

function isSimpleAction () {
  return ['list', 'stopall', 'cleanlogs'].indexOf(action) !== -1;
};

// Show help prompt if requested or if the 
// incorrect usage options are supplied
if (argv.h || argv.help || 
  (argv._.length === 0 && !isSimpleAction())) {
  sys.puts(help);
  return;
}

// If we are passed more than one non-hyphenated
// options, only use the first one. Assume the 
// rest are pass-through for the child process
var file = argv._[0];

// Setup pass-thru options for child-process
var options = {};
options.options = process.argv.splice(process.argv.indexOf(file)).splice(1);

// Setup configurations for forever before using optimist otherwise it will modify argv! and p will become a boolean
var config = {
  root: argv.p
};

// Now that we've removed the target script options
// reparse the options and setup the forever settings
argv = require('optimist')(process.argv).argv;
Object.keys(argv).forEach(function (key) {
  if (mappings[key]) {
    options[mappings[key]] = argv[key];
  }
});

// If max isn't specified set it to run forever
if (typeof options['max'] === 'undefined') {
  options.forever = true;
}


function tryStart (callback) {
  var fullPath, uid = forever.randomString(16);
  options.uid = uid;
  options.pidFile = 'forever' + uid + '.pid';
  options.logFile = argv.l || 'forever' + uid + '.log';
  fullPath = path.join(forever.config.root, options.logFile);
  
  forever.stat(fullPath, file, function (err) {
    if (err) {
      sys.puts('Cannot start forever: ' + err.message);
      process.exit(0);
    }
  
    callback();
  });
}

var loader = forever.load(config);
loader.on('load', function () {  
  var tidy = forever.cleanUp(action === 'cleanlogs'); 
  tidy.on('cleanUp', function () {
    if (action) {
      switch (action) {
        case 'start': 
          tryStart(function () { forever.startDaemon(file, options); });
          break;
          
        case 'stop':
          var runner = forever.stop(file, true);
          runner.on('stop', function (process) {
            sys.puts('Forever stopped process:');
            sys.puts(process);
          });
          runner.on('error', function (err) {
            sys.puts('Forever cannot find process with index: ' + file)
          })
          break;
          
        case 'stopall':
          var runner = forever.stopAll(true);
          runner.on('stopAll', function (processes) {
            if (processes) {
              sys.puts('Forever stopped processes:');
              sys.puts(processes);
            }
            else {
              sys.puts('No forever processes running');
            }
          });
          break;
          
        case 'list':
          var processes = forever.list(true);
          sys.puts(processes ? processes : 'No forever processes running');
          break;
      }
    }
    else {
      tryStart(function () { 
        forever.start(file, options).save().on('restart', function (fvr) { fvr.save() });
      });
    }
  });
});
